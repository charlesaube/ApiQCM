// <auto-generated />
using Devoir_02.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Devoir_02.Migrations
{
    [DbContext(typeof(QCMContext))]
    [Migration("20201125013429_mig1_dbinit")]
    partial class mig1_dbinit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Devoir_02.Models.Entity.Answer", b =>
                {
                    b.Property<int>("AnswerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("OptionID")
                        .HasColumnType("int");

                    b.Property<int>("QuizID")
                        .HasColumnType("int");

                    b.HasKey("AnswerID");

                    b.HasIndex("OptionID");

                    b.HasIndex("QuizID");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            AnswerID = 1,
                            OptionID = 1,
                            QuizID = 1
                        },
                        new
                        {
                            AnswerID = 2,
                            OptionID = 4,
                            QuizID = 1
                        },
                        new
                        {
                            AnswerID = 3,
                            OptionID = 5,
                            QuizID = 1
                        },
                        new
                        {
                            AnswerID = 4,
                            OptionID = 9,
                            QuizID = 1
                        },
                        new
                        {
                            AnswerID = 5,
                            OptionID = 14,
                            QuizID = 1
                        },
                        new
                        {
                            AnswerID = 6,
                            OptionID = 1,
                            QuizID = 2
                        },
                        new
                        {
                            AnswerID = 7,
                            OptionID = 7,
                            QuizID = 2
                        },
                        new
                        {
                            AnswerID = 8,
                            OptionID = 9,
                            QuizID = 2
                        },
                        new
                        {
                            AnswerID = 9,
                            OptionID = 11,
                            QuizID = 2
                        });
                });

            modelBuilder.Entity("Devoir_02.Models.Entity.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            Description = "easy"
                        },
                        new
                        {
                            CategoryID = 2,
                            Description = "medium"
                        },
                        new
                        {
                            CategoryID = 3,
                            Description = "hard"
                        });
                });

            modelBuilder.Entity("Devoir_02.Models.Entity.Option", b =>
                {
                    b.Property<int>("OptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IsRight")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("OptionID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            OptionID = 1,
                            IsRight = 0,
                            QuestionID = 1,
                            Text = "a coffee"
                        },
                        new
                        {
                            OptionID = 2,
                            IsRight = 1,
                            QuestionID = 1,
                            Text = "a high-level programming language"
                        },
                        new
                        {
                            OptionID = 3,
                            IsRight = 0,
                            QuestionID = 1,
                            Text = "a source code editor"
                        },
                        new
                        {
                            OptionID = 4,
                            IsRight = 1,
                            QuestionID = 2,
                            Text = "is a template that describes the behavior that the object of its type support"
                        },
                        new
                        {
                            OptionID = 5,
                            IsRight = 1,
                            QuestionID = 2,
                            Text = "can have any number of methods"
                        },
                        new
                        {
                            OptionID = 6,
                            IsRight = 1,
                            QuestionID = 3,
                            Text = "the process where one class acquires the properties (methods and fields) of another."
                        },
                        new
                        {
                            OptionID = 7,
                            IsRight = 0,
                            QuestionID = 3,
                            Text = "a problem that arises during the execution of a program."
                        },
                        new
                        {
                            OptionID = 8,
                            IsRight = 0,
                            QuestionID = 3,
                            Text = "it mainly used to traverse collection of elements including arrays."
                        },
                        new
                        {
                            OptionID = 9,
                            IsRight = 1,
                            QuestionID = 4,
                            Text = "true"
                        },
                        new
                        {
                            OptionID = 10,
                            IsRight = 0,
                            QuestionID = 4,
                            Text = "false"
                        },
                        new
                        {
                            OptionID = 11,
                            IsRight = 1,
                            QuestionID = 5,
                            Text = "true"
                        },
                        new
                        {
                            OptionID = 12,
                            IsRight = 0,
                            QuestionID = 5,
                            Text = "false"
                        },
                        new
                        {
                            OptionID = 13,
                            IsRight = 0,
                            QuestionID = 6,
                            Text = "variables"
                        },
                        new
                        {
                            OptionID = 14,
                            IsRight = 1,
                            QuestionID = 6,
                            Text = "arrays"
                        },
                        new
                        {
                            OptionID = 15,
                            IsRight = 0,
                            QuestionID = 6,
                            Text = "methods"
                        });
                });

            modelBuilder.Entity("Devoir_02.Models.Entity.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("QuestionID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionID = 1,
                            CategoryID = 1,
                            Text = "Java is ...",
                            Type = "multiplechoice",
                            Weight = 1
                        },
                        new
                        {
                            QuestionID = 2,
                            CategoryID = 2,
                            Text = "A Java class",
                            Type = "checkboxes",
                            Weight = 1
                        },
                        new
                        {
                            QuestionID = 3,
                            CategoryID = 2,
                            Text = "What is Java inheritance?",
                            Type = "multiplechoice",
                            Weight = 1
                        },
                        new
                        {
                            QuestionID = 4,
                            CategoryID = 3,
                            Text = "Polymorphism is the ability of an object to take on many forms.",
                            Type = "multiplechoice",
                            Weight = 1
                        },
                        new
                        {
                            QuestionID = 5,
                            CategoryID = 1,
                            Text = "Local variables are declared in methods, constructors, or blocks.",
                            Type = "multiplechoice",
                            Weight = 1
                        },
                        new
                        {
                            QuestionID = 6,
                            CategoryID = 2,
                            Text = "... stores a fixed-size sequential collection of elements of the same type?",
                            Type = "multiplechoice",
                            Weight = 1
                        });
                });

            modelBuilder.Entity("Devoir_02.Models.Entity.QuestionQuiz", b =>
                {
                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<int>("QuizID")
                        .HasColumnType("int");

                    b.HasKey("QuestionID", "QuizID");

                    b.HasIndex("QuizID");

                    b.ToTable("QuestionQuizzes");

                    b.HasData(
                        new
                        {
                            QuestionID = 1,
                            QuizID = 1
                        },
                        new
                        {
                            QuestionID = 2,
                            QuizID = 1
                        },
                        new
                        {
                            QuestionID = 4,
                            QuizID = 1
                        },
                        new
                        {
                            QuestionID = 6,
                            QuizID = 1
                        },
                        new
                        {
                            QuestionID = 1,
                            QuizID = 2
                        },
                        new
                        {
                            QuestionID = 3,
                            QuizID = 2
                        },
                        new
                        {
                            QuestionID = 4,
                            QuizID = 2
                        },
                        new
                        {
                            QuestionID = 5,
                            QuizID = 2
                        });
                });

            modelBuilder.Entity("Devoir_02.Models.Entity.Quiz", b =>
                {
                    b.Property<int>("QuizID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("QuizID");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            QuizID = 1
                        },
                        new
                        {
                            QuizID = 2
                        });
                });

            modelBuilder.Entity("Devoir_02.Models.Entity.Answer", b =>
                {
                    b.HasOne("Devoir_02.Models.Entity.Option", "Option")
                        .WithMany("Answers")
                        .HasForeignKey("OptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Devoir_02.Models.Entity.Quiz", "Quiz")
                        .WithMany("Answers")
                        .HasForeignKey("QuizID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Devoir_02.Models.Entity.Option", b =>
                {
                    b.HasOne("Devoir_02.Models.Entity.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Devoir_02.Models.Entity.Question", b =>
                {
                    b.HasOne("Devoir_02.Models.Entity.Category", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Devoir_02.Models.Entity.QuestionQuiz", b =>
                {
                    b.HasOne("Devoir_02.Models.Entity.Question", "Question")
                        .WithMany("QuestionQuizzes")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Devoir_02.Models.Entity.Quiz", "Quiz")
                        .WithMany("QuestionQuizzes")
                        .HasForeignKey("QuizID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
